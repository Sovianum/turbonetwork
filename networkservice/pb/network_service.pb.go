// Code generated by protoc-gen-go. DO NOT EDIT.
// source: network_service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	network_service.proto

It has these top-level messages:
	NetworkDescription
	StateResponse
	ModifyResponse
	BaseResponse
	GetStateRequest
	SolveRequest
	ProcessRequest
	SolutionOptions
	ProcessOptions
	UpdateRequest
	CreateRequest
	LinkRequest
	VariatorIdentifier
	PortIdentifier
	NetworkIdentifier
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import nodeservice "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SolutionOptions_SolverTypes int32

const (
	SolutionOptions_NEWTON SolutionOptions_SolverTypes = 0
)

var SolutionOptions_SolverTypes_name = map[int32]string{
	0: "NEWTON",
}
var SolutionOptions_SolverTypes_value = map[string]int32{
	"NEWTON": 0,
}

func (x SolutionOptions_SolverTypes) String() string {
	return proto.EnumName(SolutionOptions_SolverTypes_name, int32(x))
}
func (SolutionOptions_SolverTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

type NetworkDescription struct {
	Items []*nodeservice.ServiceDescription `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *NetworkDescription) Reset()                    { *m = NetworkDescription{} }
func (m *NetworkDescription) String() string            { return proto.CompactTextString(m) }
func (*NetworkDescription) ProtoMessage()               {}
func (*NetworkDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NetworkDescription) GetItems() []*nodeservice.ServiceDescription {
	if m != nil {
		return m.Items
	}
	return nil
}

type StateResponse struct {
	States map[string]*nodeservice.NodeState `protobuf:"bytes,1,rep,name=states" json:"states,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StateResponse) Reset()                    { *m = StateResponse{} }
func (m *StateResponse) String() string            { return proto.CompactTextString(m) }
func (*StateResponse) ProtoMessage()               {}
func (*StateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StateResponse) GetStates() map[string]*nodeservice.NodeState {
	if m != nil {
		return m.States
	}
	return nil
}

type ModifyResponse struct {
	Base       *BaseResponse      `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Identifier *NetworkIdentifier `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *ModifyResponse) Reset()                    { *m = ModifyResponse{} }
func (m *ModifyResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyResponse) ProtoMessage()               {}
func (*ModifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ModifyResponse) GetBase() *BaseResponse {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ModifyResponse) GetIdentifier() *NetworkIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

type BaseResponse struct {
	Status      int32    `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Messages    []string `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (m *BaseResponse) Reset()                    { *m = BaseResponse{} }
func (m *BaseResponse) String() string            { return proto.CompactTextString(m) }
func (*BaseResponse) ProtoMessage()               {}
func (*BaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BaseResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BaseResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BaseResponse) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

type GetStateRequest struct {
	RequiredNodes []string `protobuf:"bytes,1,rep,name=requiredNodes" json:"requiredNodes,omitempty"`
}

func (m *GetStateRequest) Reset()                    { *m = GetStateRequest{} }
func (m *GetStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStateRequest) ProtoMessage()               {}
func (*GetStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetStateRequest) GetRequiredNodes() []string {
	if m != nil {
		return m.RequiredNodes
	}
	return nil
}

type SolveRequest struct {
	Identifier      *NetworkIdentifier `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	VectorPotrt     *PortIdentifier    `protobuf:"bytes,2,opt,name=vectorPotrt" json:"vectorPotrt,omitempty"`
	SolutionOptions *SolutionOptions   `protobuf:"bytes,3,opt,name=solutionOptions" json:"solutionOptions,omitempty"`
}

func (m *SolveRequest) Reset()                    { *m = SolveRequest{} }
func (m *SolveRequest) String() string            { return proto.CompactTextString(m) }
func (*SolveRequest) ProtoMessage()               {}
func (*SolveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SolveRequest) GetIdentifier() *NetworkIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *SolveRequest) GetVectorPotrt() *PortIdentifier {
	if m != nil {
		return m.VectorPotrt
	}
	return nil
}

func (m *SolveRequest) GetSolutionOptions() *SolutionOptions {
	if m != nil {
		return m.SolutionOptions
	}
	return nil
}

type ProcessRequest struct {
	Identifier     *NetworkIdentifier `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	ProcessOptions *ProcessOptions    `protobuf:"bytes,2,opt,name=processOptions" json:"processOptions,omitempty"`
}

func (m *ProcessRequest) Reset()                    { *m = ProcessRequest{} }
func (m *ProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessRequest) ProtoMessage()               {}
func (*ProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ProcessRequest) GetIdentifier() *NetworkIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *ProcessRequest) GetProcessOptions() *ProcessOptions {
	if m != nil {
		return m.ProcessOptions
	}
	return nil
}

type SolutionOptions struct {
	SolverType     SolutionOptions_SolverTypes `protobuf:"varint,1,opt,name=solverType,enum=networkservice.SolutionOptions_SolverTypes" json:"solverType,omitempty"`
	Init           []float64                   `protobuf:"fixed64,2,rep,packed,name=init" json:"init,omitempty"`
	Precision      float64                     `protobuf:"fixed64,3,opt,name=precision" json:"precision,omitempty"`
	RelaxCoef      float64                     `protobuf:"fixed64,4,opt,name=relaxCoef" json:"relaxCoef,omitempty"`
	IterLimit      int32                       `protobuf:"varint,5,opt,name=iterLimit" json:"iterLimit,omitempty"`
	ProcessOptions *ProcessOptions             `protobuf:"bytes,6,opt,name=processOptions" json:"processOptions,omitempty"`
}

func (m *SolutionOptions) Reset()                    { *m = SolutionOptions{} }
func (m *SolutionOptions) String() string            { return proto.CompactTextString(m) }
func (*SolutionOptions) ProtoMessage()               {}
func (*SolutionOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SolutionOptions) GetSolverType() SolutionOptions_SolverTypes {
	if m != nil {
		return m.SolverType
	}
	return SolutionOptions_NEWTON
}

func (m *SolutionOptions) GetInit() []float64 {
	if m != nil {
		return m.Init
	}
	return nil
}

func (m *SolutionOptions) GetPrecision() float64 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *SolutionOptions) GetRelaxCoef() float64 {
	if m != nil {
		return m.RelaxCoef
	}
	return 0
}

func (m *SolutionOptions) GetIterLimit() int32 {
	if m != nil {
		return m.IterLimit
	}
	return 0
}

func (m *SolutionOptions) GetProcessOptions() *ProcessOptions {
	if m != nil {
		return m.ProcessOptions
	}
	return nil
}

type ProcessOptions struct {
	RelaxCoef      float64 `protobuf:"fixed64,1,opt,name=relaxCoef" json:"relaxCoef,omitempty"`
	Precision      float64 `protobuf:"fixed64,4,opt,name=precision" json:"precision,omitempty"`
	SkipIterations int32   `protobuf:"varint,2,opt,name=skipIterations" json:"skipIterations,omitempty"`
	IterNum        int32   `protobuf:"varint,3,opt,name=iterNum" json:"iterNum,omitempty"`
}

func (m *ProcessOptions) Reset()                    { *m = ProcessOptions{} }
func (m *ProcessOptions) String() string            { return proto.CompactTextString(m) }
func (*ProcessOptions) ProtoMessage()               {}
func (*ProcessOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ProcessOptions) GetRelaxCoef() float64 {
	if m != nil {
		return m.RelaxCoef
	}
	return 0
}

func (m *ProcessOptions) GetPrecision() float64 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *ProcessOptions) GetSkipIterations() int32 {
	if m != nil {
		return m.SkipIterations
	}
	return 0
}

func (m *ProcessOptions) GetIterNum() int32 {
	if m != nil {
		return m.IterNum
	}
	return 0
}

type UpdateRequest struct {
	Identifier  *NetworkIdentifier                  `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	NodeUpdates map[string]*nodeservice.RequestData `protobuf:"bytes,2,rep,name=nodeUpdates" json:"nodeUpdates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateRequest) GetIdentifier() *NetworkIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *UpdateRequest) GetNodeUpdates() map[string]*nodeservice.RequestData {
	if m != nil {
		return m.NodeUpdates
	}
	return nil
}

type CreateRequest struct {
	NodeRequests map[string]*nodeservice.RequestData `protobuf:"bytes,1,rep,name=nodeRequests" json:"nodeRequests,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LinkRequests []*LinkRequest                      `protobuf:"bytes,2,rep,name=linkRequests" json:"linkRequests,omitempty"`
	Variators    []*VariatorIdentifier               `protobuf:"bytes,3,rep,name=variators" json:"variators,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateRequest) GetNodeRequests() map[string]*nodeservice.RequestData {
	if m != nil {
		return m.NodeRequests
	}
	return nil
}

func (m *CreateRequest) GetLinkRequests() []*LinkRequest {
	if m != nil {
		return m.LinkRequests
	}
	return nil
}

func (m *CreateRequest) GetVariators() []*VariatorIdentifier {
	if m != nil {
		return m.Variators
	}
	return nil
}

type LinkRequest struct {
	Id1      *PortIdentifier      `protobuf:"bytes,1,opt,name=id1" json:"id1,omitempty"`
	Id2      *PortIdentifier      `protobuf:"bytes,2,opt,name=id2" json:"id2,omitempty"`
	LinkType nodeservice.LinkType `protobuf:"varint,3,opt,name=linkType,enum=nodeservice.LinkType" json:"linkType,omitempty"`
}

func (m *LinkRequest) Reset()                    { *m = LinkRequest{} }
func (m *LinkRequest) String() string            { return proto.CompactTextString(m) }
func (*LinkRequest) ProtoMessage()               {}
func (*LinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *LinkRequest) GetId1() *PortIdentifier {
	if m != nil {
		return m.Id1
	}
	return nil
}

func (m *LinkRequest) GetId2() *PortIdentifier {
	if m != nil {
		return m.Id2
	}
	return nil
}

func (m *LinkRequest) GetLinkType() nodeservice.LinkType {
	if m != nil {
		return m.LinkType
	}
	return nodeservice.LinkType_SIMPLE
}

type VariatorIdentifier struct {
	NodeName     string `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
	VariableName string `protobuf:"bytes,2,opt,name=variableName" json:"variableName,omitempty"`
}

func (m *VariatorIdentifier) Reset()                    { *m = VariatorIdentifier{} }
func (m *VariatorIdentifier) String() string            { return proto.CompactTextString(m) }
func (*VariatorIdentifier) ProtoMessage()               {}
func (*VariatorIdentifier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *VariatorIdentifier) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *VariatorIdentifier) GetVariableName() string {
	if m != nil {
		return m.VariableName
	}
	return ""
}

type PortIdentifier struct {
	NodeName string `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
	PortTag  string `protobuf:"bytes,2,opt,name=portTag" json:"portTag,omitempty"`
}

func (m *PortIdentifier) Reset()                    { *m = PortIdentifier{} }
func (m *PortIdentifier) String() string            { return proto.CompactTextString(m) }
func (*PortIdentifier) ProtoMessage()               {}
func (*PortIdentifier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PortIdentifier) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *PortIdentifier) GetPortTag() string {
	if m != nil {
		return m.PortTag
	}
	return ""
}

type NetworkIdentifier struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *NetworkIdentifier) Reset()                    { *m = NetworkIdentifier{} }
func (m *NetworkIdentifier) String() string            { return proto.CompactTextString(m) }
func (*NetworkIdentifier) ProtoMessage()               {}
func (*NetworkIdentifier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *NetworkIdentifier) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*NetworkDescription)(nil), "networkservice.NetworkDescription")
	proto.RegisterType((*StateResponse)(nil), "networkservice.StateResponse")
	proto.RegisterType((*ModifyResponse)(nil), "networkservice.ModifyResponse")
	proto.RegisterType((*BaseResponse)(nil), "networkservice.BaseResponse")
	proto.RegisterType((*GetStateRequest)(nil), "networkservice.GetStateRequest")
	proto.RegisterType((*SolveRequest)(nil), "networkservice.SolveRequest")
	proto.RegisterType((*ProcessRequest)(nil), "networkservice.ProcessRequest")
	proto.RegisterType((*SolutionOptions)(nil), "networkservice.SolutionOptions")
	proto.RegisterType((*ProcessOptions)(nil), "networkservice.ProcessOptions")
	proto.RegisterType((*UpdateRequest)(nil), "networkservice.UpdateRequest")
	proto.RegisterType((*CreateRequest)(nil), "networkservice.CreateRequest")
	proto.RegisterType((*LinkRequest)(nil), "networkservice.LinkRequest")
	proto.RegisterType((*VariatorIdentifier)(nil), "networkservice.VariatorIdentifier")
	proto.RegisterType((*PortIdentifier)(nil), "networkservice.PortIdentifier")
	proto.RegisterType((*NetworkIdentifier)(nil), "networkservice.NetworkIdentifier")
	proto.RegisterEnum("networkservice.SolutionOptions_SolverTypes", SolutionOptions_SolverTypes_name, SolutionOptions_SolverTypes_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkService service

type NetworkServiceClient interface {
	CreateNetwork(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ModifyResponse, error)
	UpdateNetwork(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ModifyResponse, error)
	DeleteNetwork(ctx context.Context, in *NetworkIdentifier, opts ...grpc.CallOption) (*ModifyResponse, error)
	Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ModifyResponse, error)
	Solve(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*ModifyResponse, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	GetDescription(ctx context.Context, in *nodeservice.Empty, opts ...grpc.CallOption) (*NetworkDescription, error)
}

type networkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceClient(cc *grpc.ClientConn) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) CreateNetwork(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ModifyResponse, error) {
	out := new(ModifyResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/CreateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) UpdateNetwork(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ModifyResponse, error) {
	out := new(ModifyResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/UpdateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) DeleteNetwork(ctx context.Context, in *NetworkIdentifier, opts ...grpc.CallOption) (*ModifyResponse, error) {
	out := new(ModifyResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/DeleteNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ModifyResponse, error) {
	out := new(ModifyResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/Process", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) Solve(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*ModifyResponse, error) {
	out := new(ModifyResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/Solve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetDescription(ctx context.Context, in *nodeservice.Empty, opts ...grpc.CallOption) (*NetworkDescription, error) {
	out := new(NetworkDescription)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/GetDescription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkService service

type NetworkServiceServer interface {
	CreateNetwork(context.Context, *CreateRequest) (*ModifyResponse, error)
	UpdateNetwork(context.Context, *UpdateRequest) (*ModifyResponse, error)
	DeleteNetwork(context.Context, *NetworkIdentifier) (*ModifyResponse, error)
	Process(context.Context, *ProcessRequest) (*ModifyResponse, error)
	Solve(context.Context, *SolveRequest) (*ModifyResponse, error)
	GetState(context.Context, *GetStateRequest) (*StateResponse, error)
	GetDescription(context.Context, *nodeservice.Empty) (*NetworkDescription, error)
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).CreateNetwork(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/UpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).UpdateNetwork(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).DeleteNetwork(ctx, req.(*NetworkIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Process(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_Solve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Solve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/Solve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Solve(ctx, req.(*SolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodeservice.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/GetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetDescription(ctx, req.(*nodeservice.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkservice.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetwork",
			Handler:    _NetworkService_CreateNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _NetworkService_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _NetworkService_DeleteNetwork_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _NetworkService_Process_Handler,
		},
		{
			MethodName: "Solve",
			Handler:    _NetworkService_Solve_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _NetworkService_GetState_Handler,
		},
		{
			MethodName: "GetDescription",
			Handler:    _NetworkService_GetDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network_service.proto",
}

func init() { proto.RegisterFile("network_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 969 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5b, 0x6f, 0x23, 0x35,
	0x14, 0xee, 0xe4, 0xd2, 0x36, 0x67, 0x92, 0x69, 0xd7, 0xd2, 0xae, 0x86, 0xd0, 0x85, 0x60, 0x10,
	0x0a, 0x02, 0x85, 0xdd, 0x20, 0x04, 0xe2, 0x85, 0xbd, 0xb4, 0x5b, 0x95, 0x96, 0x6c, 0x70, 0xc2,
	0xf5, 0x05, 0x4d, 0x33, 0xee, 0xca, 0x6a, 0x92, 0x99, 0xb5, 0x9d, 0x40, 0x7e, 0x00, 0xaf, 0xfc,
	0x01, 0x5e, 0xe1, 0x99, 0x77, 0x1e, 0xf9, 0x21, 0xfc, 0x14, 0x84, 0x3c, 0xf6, 0x5c, 0x3c, 0xe9,
	0x8d, 0x55, 0x9f, 0x12, 0x9f, 0x39, 0xdf, 0x37, 0xdf, 0xf9, 0x7c, 0xe6, 0xd8, 0x70, 0x77, 0x4e,
	0xe5, 0x4f, 0x11, 0x3f, 0xff, 0x51, 0x50, 0xbe, 0x64, 0x13, 0xda, 0x8b, 0x79, 0x24, 0x23, 0xe4,
	0x99, 0xb0, 0x89, 0xb6, 0xd1, 0x3c, 0x0a, 0xa9, 0x9d, 0x83, 0x8f, 0x01, 0x0d, 0x74, 0xd6, 0x3e,
	0x15, 0x13, 0xce, 0x62, 0xc9, 0xa2, 0x39, 0xfa, 0x18, 0xea, 0x4c, 0xd2, 0x99, 0xf0, 0x9d, 0x4e,
	0xb5, 0xeb, 0xf6, 0xdf, 0xec, 0x29, 0x64, 0x0a, 0x1c, 0xe9, 0xdf, 0x42, 0x3e, 0xd1, 0xd9, 0xf8,
	0x0f, 0x07, 0x5a, 0x23, 0x19, 0x48, 0x4a, 0xa8, 0x88, 0xa3, 0xb9, 0xa0, 0xe8, 0x31, 0x6c, 0x0a,
	0x15, 0x48, 0x99, 0xde, 0xeb, 0xd9, 0x9a, 0x7a, 0x56, 0xba, 0x5e, 0x89, 0x83, 0xb9, 0xe4, 0x2b,
	0x62, 0x80, 0xed, 0xaf, 0xc0, 0x2d, 0x84, 0xd1, 0x2e, 0x54, 0xcf, 0xe9, 0xca, 0x77, 0x3a, 0x4e,
	0xb7, 0x41, 0xd4, 0x5f, 0xf4, 0x01, 0xd4, 0x97, 0xc1, 0x74, 0x41, 0xfd, 0x4a, 0xc7, 0xe9, 0xba,
	0xfd, 0x7b, 0x96, 0xd8, 0x41, 0x14, 0x52, 0xfd, 0x0e, 0x9d, 0xf4, 0x59, 0xe5, 0x53, 0x07, 0xff,
	0xe2, 0x80, 0xf7, 0x65, 0x14, 0xb2, 0xb3, 0x55, 0x26, 0xf4, 0x01, 0xd4, 0x4e, 0x03, 0x41, 0x13,
	0x5e, 0xb7, 0xbf, 0x57, 0x96, 0xf9, 0x24, 0x10, 0x99, 0x4a, 0x92, 0x64, 0xa2, 0xc7, 0x00, 0x2c,
	0xa4, 0x73, 0xc9, 0xce, 0x18, 0xe5, 0xe6, 0xdd, 0x6f, 0x95, 0x71, 0xc6, 0xdb, 0xa3, 0x2c, 0x91,
	0x14, 0x40, 0x38, 0x84, 0x66, 0x91, 0x18, 0xdd, 0xd3, 0x6e, 0x2d, 0x44, 0x22, 0xa3, 0x4e, 0xcc,
	0x0a, 0x75, 0xc0, 0x0d, 0x73, 0xb7, 0x93, 0x77, 0x35, 0x48, 0x31, 0x84, 0xda, 0xb0, 0x3d, 0xa3,
	0x42, 0x04, 0x2f, 0xa8, 0xf0, 0xab, 0x9d, 0x6a, 0xb7, 0x41, 0xb2, 0x35, 0xfe, 0x04, 0x76, 0x0e,
	0xa9, 0x34, 0x46, 0xbf, 0x5c, 0x50, 0x21, 0xd1, 0x3b, 0xd0, 0xe2, 0xf4, 0xe5, 0x82, 0x71, 0x1a,
	0x2a, 0x83, 0xf4, 0xee, 0x34, 0x88, 0x1d, 0xc4, 0xff, 0x38, 0xd0, 0x1c, 0x45, 0xd3, 0x65, 0x06,
	0xb3, 0x4b, 0x76, 0x5e, 0xa1, 0x64, 0xf4, 0x08, 0xdc, 0x25, 0x9d, 0xc8, 0x88, 0x0f, 0x23, 0xc9,
	0xa5, 0xb1, 0xed, 0x8d, 0x32, 0xc7, 0x30, 0xe2, 0xb2, 0x40, 0x50, 0x84, 0xa0, 0x23, 0xd8, 0x11,
	0xd1, 0x74, 0xa1, 0xca, 0x7e, 0x9e, 0x14, 0xaf, 0x2a, 0x76, 0x74, 0x97, 0x96, 0x7a, 0xcb, 0x4e,
	0x23, 0x65, 0x1c, 0xfe, 0xcd, 0x01, 0x6f, 0xc8, 0xa3, 0x09, 0x15, 0xe2, 0x16, 0x4b, 0x7c, 0x06,
	0x5e, 0xac, 0x49, 0x53, 0x7d, 0x97, 0x55, 0x69, 0x65, 0x91, 0x12, 0x0a, 0xff, 0x59, 0x81, 0x9d,
	0x52, 0x09, 0xe8, 0x18, 0x40, 0xa8, 0x1d, 0xe1, 0xe3, 0x55, 0xac, 0x9b, 0xd5, 0xeb, 0xbf, 0x7f,
	0x4d, 0xdd, 0xbd, 0x51, 0x86, 0x10, 0xa4, 0x00, 0x47, 0x08, 0x6a, 0x6c, 0xce, 0xd4, 0x26, 0x54,
	0xbb, 0x0e, 0x49, 0xfe, 0xa3, 0x3d, 0x68, 0xc4, 0x9c, 0x4e, 0x98, 0x50, 0x8d, 0xa6, 0x7c, 0x75,
	0x48, 0x1e, 0x50, 0x4f, 0x39, 0x9d, 0x06, 0x3f, 0x3f, 0x8d, 0xe8, 0x99, 0x5f, 0xd3, 0x4f, 0xb3,
	0x80, 0x7a, 0xca, 0x24, 0xe5, 0x27, 0x6c, 0xc6, 0xa4, 0x5f, 0x4f, 0x3a, 0x38, 0x0f, 0x5c, 0x60,
	0xcb, 0xe6, 0x2b, 0xd9, 0xf2, 0x1a, 0xb8, 0x85, 0x82, 0x10, 0xc0, 0xe6, 0xe0, 0xe0, 0xdb, 0xf1,
	0xf3, 0xc1, 0xee, 0x06, 0xfe, 0x35, 0xdf, 0xcf, 0xd4, 0x30, 0x4b, 0xb1, 0x73, 0x81, 0xe2, 0xbc,
	0xda, 0x5a, 0xb9, 0xda, 0x77, 0xc1, 0x13, 0xe7, 0x2c, 0x3e, 0x92, 0x94, 0x07, 0xf9, 0x46, 0xd6,
	0x49, 0x29, 0x8a, 0x7c, 0xd8, 0x52, 0x65, 0x0e, 0x16, 0xb3, 0xc4, 0xb1, 0x3a, 0x49, 0x97, 0xf8,
	0x5f, 0x07, 0x5a, 0x5f, 0xc7, 0x61, 0xe1, 0xcb, 0xbb, 0x85, 0xfe, 0x1a, 0x82, 0xab, 0x26, 0x9c,
	0xe6, 0x15, 0xc9, 0xee, 0xb9, 0xfd, 0x5e, 0x99, 0xc3, 0x7a, 0x6d, 0x32, 0x06, 0x0d, 0x40, 0x4f,
	0xd7, 0x22, 0x45, 0xfb, 0x3b, 0xd8, 0x2d, 0x27, 0x5c, 0x30, 0x67, 0x7b, 0xf6, 0x9c, 0xf5, 0xad,
	0x39, 0x6b, 0x5e, 0xb4, 0x1f, 0xc8, 0xa0, 0x38, 0x69, 0xff, 0xae, 0x40, 0xeb, 0x29, 0xa7, 0x05,
	0x03, 0x46, 0xd0, 0x54, 0x38, 0xb3, 0x4c, 0xcf, 0x85, 0x0f, 0xcb, 0xf2, 0x2d, 0x50, 0x22, 0x3f,
	0x45, 0x68, 0xfd, 0x16, 0x09, 0xfa, 0x1c, 0x9a, 0x53, 0x36, 0x3f, 0xcf, 0x48, 0xb5, 0x27, 0xaf,
	0x97, 0x49, 0x4f, 0xf2, 0x1c, 0x62, 0x01, 0xd0, 0x23, 0x68, 0x2c, 0x03, 0xce, 0x02, 0x19, 0x71,
	0x3d, 0x40, 0xdd, 0x3e, 0x2e, 0xa3, 0xbf, 0x31, 0x09, 0x85, 0x6d, 0xc9, 0x41, 0xed, 0xef, 0xe1,
	0xce, 0x9a, 0xca, 0x5b, 0x32, 0xf1, 0x77, 0x07, 0xdc, 0x82, 0x74, 0xf4, 0x00, 0xaa, 0x2c, 0x7c,
	0x68, 0x9a, 0xe7, 0xba, 0xd9, 0xa9, 0x52, 0x35, 0xa2, 0x7f, 0xc3, 0x69, 0xab, 0x52, 0xd1, 0x43,
	0xd8, 0x56, 0x06, 0x25, 0x63, 0xa6, 0x9a, 0x8c, 0x99, 0xbb, 0x96, 0xd4, 0x13, 0xf3, 0x90, 0x64,
	0x69, 0x78, 0x0c, 0x68, 0xdd, 0x22, 0x75, 0x32, 0x29, 0xdc, 0x20, 0x98, 0x51, 0xe3, 0x43, 0xb6,
	0x46, 0x18, 0x9a, 0x89, 0x81, 0xa7, 0x53, 0xfd, 0x5c, 0x1f, 0x6c, 0x56, 0x0c, 0x3f, 0x03, 0xcf,
	0xd6, 0x77, 0x25, 0xa3, 0x0f, 0x5b, 0x71, 0xc4, 0xe5, 0x38, 0x78, 0x61, 0xc8, 0xd2, 0x25, 0x7e,
	0x1b, 0xee, 0xac, 0x7d, 0x56, 0xc8, 0x83, 0x0a, 0x0b, 0xcd, 0x61, 0x5b, 0x61, 0x61, 0xff, 0xaf,
	0x1a, 0x78, 0x26, 0xcb, 0xdc, 0x72, 0xd0, 0x30, 0x6d, 0x60, 0x13, 0x47, 0xf7, 0xaf, 0x6c, 0xd5,
	0xf6, 0x9a, 0xbb, 0xf6, 0x45, 0x03, 0x6f, 0x28, 0x46, 0xfd, 0xa5, 0x5d, 0xca, 0x68, 0x7d, 0xbb,
	0x37, 0x60, 0x1c, 0x43, 0x6b, 0x9f, 0x4e, 0x69, 0xce, 0x78, 0xfd, 0x44, 0xb9, 0x01, 0xeb, 0x31,
	0x6c, 0x99, 0x61, 0x8a, 0x2e, 0x9b, 0xd1, 0x37, 0x97, 0x78, 0x08, 0xf5, 0x64, 0x6a, 0xa3, 0xbd,
	0x0b, 0x4e, 0xab, 0xe5, 0xff, 0xa8, 0xf5, 0x04, 0xb6, 0xd3, 0xdb, 0x0c, 0x5a, 0x3b, 0xf1, 0x4b,
	0xf7, 0x9c, 0xf6, 0xfd, 0x2b, 0xaf, 0x9b, 0x78, 0x03, 0x7d, 0x01, 0xde, 0x21, 0x95, 0xc5, 0xab,
	0x2f, 0xb2, 0xda, 0xfc, 0x60, 0x16, 0xcb, 0x55, 0x1b, 0x5f, 0x62, 0x67, 0x01, 0x87, 0x37, 0x9e,
	0xd4, 0x7e, 0xa8, 0xc4, 0xa7, 0xa7, 0x9b, 0xc9, 0xbd, 0xfa, 0xa3, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x15, 0x5b, 0xce, 0xfe, 0x94, 0x0b, 0x00, 0x00,
}
