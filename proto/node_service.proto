syntax = "proto3";
package nodeservice;
option go_package="pb";


service NodeService {
    rpc CreateNodes (NodeCreateRequest) returns (NodeModifyResponse) {};
    rpc UpdateNodes (NodeUpdateRequest) returns (NodeModifyResponse) {};
    rpc DeleteNodes (Identifiers) returns (NodeModifyResponse) {};
    rpc GetNodes (NodeStateRequest) returns (NodeStateResponse) {};
    rpc Process (Identifiers) returns (NodeModifyResponse) {};
    rpc Link (LinkRequest) returns (NodeModifyResponse) {};
    rpc GetDescription (Empty) returns (ServiceDescription) {};
}

message Empty {}

message NodeStateResponse {
    BaseResponse base = 1;
    repeated UnitResponse items = 2;

    message UnitResponse {
        BaseResponse base = 1;
        NodeIdentifier identifier = 2;
        NodeState state = 3;
    }
}

message NodeModifyResponse {
    BaseResponse base = 1;
    repeated UnitResponse items = 2;

    message UnitResponse {
        repeated NodeIdentifier identifiers = 1;
        BaseResponse base = 2;
    }
}

message BaseResponse {
    int32 status = 1;
    string description = 2;
    repeated string messages = 3;
}

message NodeState {
    string name = 1;
    map<string, double> numValues = 2;
    map<string, string> stringValues = 3;
    map<string, NodeState> children = 4;
}

message ServiceDescription {
    string description = 1;
    repeated NodeDescription nodes = 2;
}

message NodeDescription {
    string NodeType = 1;
    repeated AttachedPortDescription basePorts = 2;
    repeated ContextState contextStates = 3;

    message ContextState {
        repeated AttachedPortDescription ports = 1;
    }

    message AttachedPortDescription {
       PortDescription description = 1;
       PortType type = 2;

       enum PortType {
           INPUT = 0;
           OUTPUT = 1;
           NEUTRAL = 2;
           CONTEXT_DEPENDENT = 3;
       }
    }
}

message PortDescription {
    string prefix = 1;
    bool isMulti = 2;
}

message LinkRequest {
    repeated UnitRequest items = 1;

    message UnitRequest {
        LinkType linkType = 1;
        PortIdentifier id1 = 2;
        PortIdentifier id2 = 3;
    }
}

enum LinkType {
    SIMPLE = 0;
    WEAK_FIRST = 1;
    WEAK_SECOND = 2;
    WEAK_BOTH = 3;
}

message NodeUpdateRequest {
    repeated UnitRequest items = 1;

    message UnitRequest {
        NodeIdentifier identifier = 1;
        RequestData data = 2;
    }
}

message NodeStateRequest {
    repeated UnitRequest items = 1;

    message UnitRequest {
        NodeIdentifier identifier = 1;
        // optional field neccessary if complete state is not required
        repeated string requiredFields = 2;
    }
}

message NodeCreateRequest {
    repeated UnitRequest items = 1;

    message UnitRequest {
        string nodeName = 1;
        string nodeType = 2;
        RequestData data = 3;
    }
}

message Identifiers {
    repeated NodeIdentifier ids = 1;
}

message PortIdentifier {
    NodeIdentifier nodeIdentifier = 1;
    string nodeName = 2;
    string portTag = 3;
}

message NodeIdentifier {
    int32 id = 1;
    string nodeType = 2;
}

message RequestData {
    repeated double dArgs = 1;
    repeated string sArgs = 2;

    map<string, double> dKwargs = 3;
    map<string, string> sKwargs = 4;
}