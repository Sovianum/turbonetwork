// Code generated by protoc-gen-go. DO NOT EDIT.
// source: network_service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SolutionOptions_SolverTypes int32

const (
	SolutionOptions_NEWTON SolutionOptions_SolverTypes = 0
)

var SolutionOptions_SolverTypes_name = map[int32]string{
	0: "NEWTON",
}
var SolutionOptions_SolverTypes_value = map[string]int32{
	"NEWTON": 0,
}

func (x SolutionOptions_SolverTypes) String() string {
	return proto.EnumName(SolutionOptions_SolverTypes_name, int32(x))
}
func (SolutionOptions_SolverTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{6, 0}
}

type NetworkDescription struct {
	Items []*ServiceDescription `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *NetworkDescription) Reset()                    { *m = NetworkDescription{} }
func (m *NetworkDescription) String() string            { return proto.CompactTextString(m) }
func (*NetworkDescription) ProtoMessage()               {}
func (*NetworkDescription) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *NetworkDescription) GetItems() []*ServiceDescription {
	if m != nil {
		return m.Items
	}
	return nil
}

type GraphStateResponse struct {
	States map[string]*NodeState `protobuf:"bytes,1,rep,name=states" json:"states,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GraphStateResponse) Reset()                    { *m = GraphStateResponse{} }
func (m *GraphStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GraphStateResponse) ProtoMessage()               {}
func (*GraphStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GraphStateResponse) GetStates() map[string]*NodeState {
	if m != nil {
		return m.States
	}
	return nil
}

type GraphModifyResponse struct {
	Base       *BaseResponse      `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Identifier *NetworkIdentifier `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *GraphModifyResponse) Reset()                    { *m = GraphModifyResponse{} }
func (m *GraphModifyResponse) String() string            { return proto.CompactTextString(m) }
func (*GraphModifyResponse) ProtoMessage()               {}
func (*GraphModifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GraphModifyResponse) GetBase() *BaseResponse {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GraphModifyResponse) GetIdentifier() *NetworkIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

type GraphStateRequest struct {
	RequiredNodes []string `protobuf:"bytes,1,rep,name=requiredNodes" json:"requiredNodes,omitempty"`
}

func (m *GraphStateRequest) Reset()                    { *m = GraphStateRequest{} }
func (m *GraphStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GraphStateRequest) ProtoMessage()               {}
func (*GraphStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GraphStateRequest) GetRequiredNodes() []string {
	if m != nil {
		return m.RequiredNodes
	}
	return nil
}

type GraphSolveRequest struct {
	Identifier      *NetworkIdentifier `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	VectorPotrt     *PortIdentifier    `protobuf:"bytes,2,opt,name=vectorPotrt" json:"vectorPotrt,omitempty"`
	SolutionOptions *SolutionOptions   `protobuf:"bytes,3,opt,name=solutionOptions" json:"solutionOptions,omitempty"`
}

func (m *GraphSolveRequest) Reset()                    { *m = GraphSolveRequest{} }
func (m *GraphSolveRequest) String() string            { return proto.CompactTextString(m) }
func (*GraphSolveRequest) ProtoMessage()               {}
func (*GraphSolveRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GraphSolveRequest) GetIdentifier() *NetworkIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *GraphSolveRequest) GetVectorPotrt() *PortIdentifier {
	if m != nil {
		return m.VectorPotrt
	}
	return nil
}

func (m *GraphSolveRequest) GetSolutionOptions() *SolutionOptions {
	if m != nil {
		return m.SolutionOptions
	}
	return nil
}

type GraphProcessRequest struct {
	Identifier     *NetworkIdentifier `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	ProcessOptions *ProcessOptions    `protobuf:"bytes,2,opt,name=processOptions" json:"processOptions,omitempty"`
}

func (m *GraphProcessRequest) Reset()                    { *m = GraphProcessRequest{} }
func (m *GraphProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*GraphProcessRequest) ProtoMessage()               {}
func (*GraphProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GraphProcessRequest) GetIdentifier() *NetworkIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *GraphProcessRequest) GetProcessOptions() *ProcessOptions {
	if m != nil {
		return m.ProcessOptions
	}
	return nil
}

type SolutionOptions struct {
	SolverType     SolutionOptions_SolverTypes `protobuf:"varint,1,opt,name=solverType,enum=networkservice.SolutionOptions_SolverTypes" json:"solverType,omitempty"`
	Init           []float64                   `protobuf:"fixed64,2,rep,packed,name=init" json:"init,omitempty"`
	Precision      float64                     `protobuf:"fixed64,3,opt,name=precision" json:"precision,omitempty"`
	RelaxCoef      float64                     `protobuf:"fixed64,4,opt,name=relaxCoef" json:"relaxCoef,omitempty"`
	IterLimit      int32                       `protobuf:"varint,5,opt,name=iterLimit" json:"iterLimit,omitempty"`
	ProcessOptions *ProcessOptions             `protobuf:"bytes,6,opt,name=processOptions" json:"processOptions,omitempty"`
}

func (m *SolutionOptions) Reset()                    { *m = SolutionOptions{} }
func (m *SolutionOptions) String() string            { return proto.CompactTextString(m) }
func (*SolutionOptions) ProtoMessage()               {}
func (*SolutionOptions) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *SolutionOptions) GetSolverType() SolutionOptions_SolverTypes {
	if m != nil {
		return m.SolverType
	}
	return SolutionOptions_NEWTON
}

func (m *SolutionOptions) GetInit() []float64 {
	if m != nil {
		return m.Init
	}
	return nil
}

func (m *SolutionOptions) GetPrecision() float64 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *SolutionOptions) GetRelaxCoef() float64 {
	if m != nil {
		return m.RelaxCoef
	}
	return 0
}

func (m *SolutionOptions) GetIterLimit() int32 {
	if m != nil {
		return m.IterLimit
	}
	return 0
}

func (m *SolutionOptions) GetProcessOptions() *ProcessOptions {
	if m != nil {
		return m.ProcessOptions
	}
	return nil
}

type ProcessOptions struct {
	RelaxCoef      float64 `protobuf:"fixed64,1,opt,name=relaxCoef" json:"relaxCoef,omitempty"`
	Precision      float64 `protobuf:"fixed64,4,opt,name=precision" json:"precision,omitempty"`
	SkipIterations int32   `protobuf:"varint,2,opt,name=skipIterations" json:"skipIterations,omitempty"`
	IterNum        int32   `protobuf:"varint,3,opt,name=iterNum" json:"iterNum,omitempty"`
}

func (m *ProcessOptions) Reset()                    { *m = ProcessOptions{} }
func (m *ProcessOptions) String() string            { return proto.CompactTextString(m) }
func (*ProcessOptions) ProtoMessage()               {}
func (*ProcessOptions) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ProcessOptions) GetRelaxCoef() float64 {
	if m != nil {
		return m.RelaxCoef
	}
	return 0
}

func (m *ProcessOptions) GetPrecision() float64 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *ProcessOptions) GetSkipIterations() int32 {
	if m != nil {
		return m.SkipIterations
	}
	return 0
}

func (m *ProcessOptions) GetIterNum() int32 {
	if m != nil {
		return m.IterNum
	}
	return 0
}

type GraphUpdateRequest struct {
	Identifier  *NetworkIdentifier      `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	NodeUpdates map[string]*RequestData `protobuf:"bytes,2,rep,name=nodeUpdates" json:"nodeUpdates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GraphUpdateRequest) Reset()                    { *m = GraphUpdateRequest{} }
func (m *GraphUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*GraphUpdateRequest) ProtoMessage()               {}
func (*GraphUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *GraphUpdateRequest) GetIdentifier() *NetworkIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *GraphUpdateRequest) GetNodeUpdates() map[string]*RequestData {
	if m != nil {
		return m.NodeUpdates
	}
	return nil
}

type GraphCreateRequest struct {
	NodeRequests map[string]*RequestData    `protobuf:"bytes,1,rep,name=nodeRequests" json:"nodeRequests,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LinkRequests []*LinkRequest_UnitRequest `protobuf:"bytes,2,rep,name=linkRequests" json:"linkRequests,omitempty"`
	Variators    []*VariatorIdentifier      `protobuf:"bytes,3,rep,name=variators" json:"variators,omitempty"`
}

func (m *GraphCreateRequest) Reset()                    { *m = GraphCreateRequest{} }
func (m *GraphCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*GraphCreateRequest) ProtoMessage()               {}
func (*GraphCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *GraphCreateRequest) GetNodeRequests() map[string]*RequestData {
	if m != nil {
		return m.NodeRequests
	}
	return nil
}

func (m *GraphCreateRequest) GetLinkRequests() []*LinkRequest_UnitRequest {
	if m != nil {
		return m.LinkRequests
	}
	return nil
}

func (m *GraphCreateRequest) GetVariators() []*VariatorIdentifier {
	if m != nil {
		return m.Variators
	}
	return nil
}

type VariatorIdentifier struct {
	NodeName     string `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
	VariableName string `protobuf:"bytes,2,opt,name=variableName" json:"variableName,omitempty"`
}

func (m *VariatorIdentifier) Reset()                    { *m = VariatorIdentifier{} }
func (m *VariatorIdentifier) String() string            { return proto.CompactTextString(m) }
func (*VariatorIdentifier) ProtoMessage()               {}
func (*VariatorIdentifier) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *VariatorIdentifier) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *VariatorIdentifier) GetVariableName() string {
	if m != nil {
		return m.VariableName
	}
	return ""
}

type NetworkIdentifier struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *NetworkIdentifier) Reset()                    { *m = NetworkIdentifier{} }
func (m *NetworkIdentifier) String() string            { return proto.CompactTextString(m) }
func (*NetworkIdentifier) ProtoMessage()               {}
func (*NetworkIdentifier) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *NetworkIdentifier) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*NetworkDescription)(nil), "networkservice.NetworkDescription")
	proto.RegisterType((*GraphStateResponse)(nil), "networkservice.GraphStateResponse")
	proto.RegisterType((*GraphModifyResponse)(nil), "networkservice.GraphModifyResponse")
	proto.RegisterType((*GraphStateRequest)(nil), "networkservice.GraphStateRequest")
	proto.RegisterType((*GraphSolveRequest)(nil), "networkservice.GraphSolveRequest")
	proto.RegisterType((*GraphProcessRequest)(nil), "networkservice.GraphProcessRequest")
	proto.RegisterType((*SolutionOptions)(nil), "networkservice.SolutionOptions")
	proto.RegisterType((*ProcessOptions)(nil), "networkservice.ProcessOptions")
	proto.RegisterType((*GraphUpdateRequest)(nil), "networkservice.GraphUpdateRequest")
	proto.RegisterType((*GraphCreateRequest)(nil), "networkservice.GraphCreateRequest")
	proto.RegisterType((*VariatorIdentifier)(nil), "networkservice.VariatorIdentifier")
	proto.RegisterType((*NetworkIdentifier)(nil), "networkservice.NetworkIdentifier")
	proto.RegisterEnum("networkservice.SolutionOptions_SolverTypes", SolutionOptions_SolverTypes_name, SolutionOptions_SolverTypes_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkService service

type NetworkServiceClient interface {
	CreateNetwork(ctx context.Context, in *GraphCreateRequest, opts ...grpc.CallOption) (*GraphModifyResponse, error)
	UpdateNetwork(ctx context.Context, in *GraphUpdateRequest, opts ...grpc.CallOption) (*GraphModifyResponse, error)
	DeleteNetwork(ctx context.Context, in *NetworkIdentifier, opts ...grpc.CallOption) (*GraphModifyResponse, error)
	Process(ctx context.Context, in *GraphProcessRequest, opts ...grpc.CallOption) (*GraphModifyResponse, error)
	Solve(ctx context.Context, in *GraphSolveRequest, opts ...grpc.CallOption) (*GraphModifyResponse, error)
	GetState(ctx context.Context, in *GraphStateRequest, opts ...grpc.CallOption) (*GraphStateResponse, error)
	GetDescription(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetworkDescription, error)
}

type networkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceClient(cc *grpc.ClientConn) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) CreateNetwork(ctx context.Context, in *GraphCreateRequest, opts ...grpc.CallOption) (*GraphModifyResponse, error) {
	out := new(GraphModifyResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/CreateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) UpdateNetwork(ctx context.Context, in *GraphUpdateRequest, opts ...grpc.CallOption) (*GraphModifyResponse, error) {
	out := new(GraphModifyResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/UpdateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) DeleteNetwork(ctx context.Context, in *NetworkIdentifier, opts ...grpc.CallOption) (*GraphModifyResponse, error) {
	out := new(GraphModifyResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/DeleteNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) Process(ctx context.Context, in *GraphProcessRequest, opts ...grpc.CallOption) (*GraphModifyResponse, error) {
	out := new(GraphModifyResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/Process", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) Solve(ctx context.Context, in *GraphSolveRequest, opts ...grpc.CallOption) (*GraphModifyResponse, error) {
	out := new(GraphModifyResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/Solve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetState(ctx context.Context, in *GraphStateRequest, opts ...grpc.CallOption) (*GraphStateResponse, error) {
	out := new(GraphStateResponse)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetDescription(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetworkDescription, error) {
	out := new(NetworkDescription)
	err := grpc.Invoke(ctx, "/networkservice.NetworkService/GetDescription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkService service

type NetworkServiceServer interface {
	CreateNetwork(context.Context, *GraphCreateRequest) (*GraphModifyResponse, error)
	UpdateNetwork(context.Context, *GraphUpdateRequest) (*GraphModifyResponse, error)
	DeleteNetwork(context.Context, *NetworkIdentifier) (*GraphModifyResponse, error)
	Process(context.Context, *GraphProcessRequest) (*GraphModifyResponse, error)
	Solve(context.Context, *GraphSolveRequest) (*GraphModifyResponse, error)
	GetState(context.Context, *GraphStateRequest) (*GraphStateResponse, error)
	GetDescription(context.Context, *Empty) (*NetworkDescription, error)
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).CreateNetwork(ctx, req.(*GraphCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/UpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).UpdateNetwork(ctx, req.(*GraphUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).DeleteNetwork(ctx, req.(*NetworkIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Process(ctx, req.(*GraphProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_Solve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphSolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Solve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/Solve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Solve(ctx, req.(*GraphSolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetState(ctx, req.(*GraphStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkservice.NetworkService/GetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetDescription(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkservice.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetwork",
			Handler:    _NetworkService_CreateNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _NetworkService_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _NetworkService_DeleteNetwork_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _NetworkService_Process_Handler,
		},
		{
			MethodName: "Solve",
			Handler:    _NetworkService_Solve_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _NetworkService_GetState_Handler,
		},
		{
			MethodName: "GetDescription",
			Handler:    _NetworkService_GetDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network_service.proto",
}

func init() { proto.RegisterFile("network_service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 886 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0x3a, 0x76, 0xda, 0x1c, 0x27, 0xdb, 0x64, 0x10, 0x68, 0x6b, 0x10, 0x0d, 0xd3, 0x0a,
	0x59, 0x02, 0xf6, 0xc2, 0x05, 0x09, 0x90, 0x90, 0xa0, 0x4d, 0x1a, 0x42, 0x8b, 0x9b, 0x8e, 0x13,
	0x68, 0x7b, 0x83, 0x36, 0xde, 0x89, 0x18, 0xc5, 0xde, 0xd9, 0xce, 0x8c, 0x0d, 0x7e, 0x02, 0xb8,
	0xe2, 0x19, 0x78, 0x83, 0x3e, 0x0d, 0xf7, 0x3c, 0x01, 0xcf, 0x80, 0xe6, 0x67, 0xd7, 0x3b, 0xbb,
	0x86, 0x44, 0x55, 0xae, 0xec, 0x3d, 0x73, 0xbe, 0x6f, 0xbe, 0xf3, 0x33, 0x67, 0x06, 0xde, 0xce,
	0xa8, 0xfa, 0x85, 0x8b, 0x8b, 0x9f, 0x24, 0x15, 0x73, 0x36, 0xa6, 0x71, 0x2e, 0xb8, 0xe2, 0x28,
	0x74, 0x66, 0x67, 0xed, 0xa1, 0x8c, 0xa7, 0xd4, 0xf7, 0xc1, 0x8f, 0x01, 0x0d, 0xad, 0xd7, 0x3e,
	0x95, 0x63, 0xc1, 0x72, 0xc5, 0x78, 0x86, 0x3e, 0x83, 0x0e, 0x53, 0x74, 0x2a, 0xa3, 0x60, 0x6f,
	0xbd, 0xdf, 0x1d, 0xdc, 0x89, 0x35, 0xb2, 0x00, 0x8e, 0xec, 0x6f, 0xc5, 0x9f, 0x58, 0x6f, 0xfc,
	0x3a, 0x00, 0x74, 0x28, 0x92, 0xfc, 0xe7, 0x91, 0x4a, 0x14, 0x25, 0x54, 0xe6, 0x3c, 0x93, 0x14,
	0x3d, 0x82, 0x0d, 0xa9, 0x0d, 0x05, 0x5d, 0x1c, 0xfb, 0xc2, 0xe2, 0x26, 0x26, 0x36, 0x5f, 0xf2,
	0x20, 0x53, 0x62, 0x41, 0x1c, 0xba, 0xf7, 0x0c, 0xba, 0x15, 0x33, 0xda, 0x81, 0xf5, 0x0b, 0xba,
	0x88, 0x82, 0xbd, 0xa0, 0xbf, 0x49, 0xf4, 0x5f, 0xf4, 0x31, 0x74, 0xe6, 0xc9, 0x64, 0x46, 0xa3,
	0xd6, 0x5e, 0xd0, 0xef, 0x0e, 0xde, 0xf1, 0x64, 0x0f, 0x79, 0x4a, 0xed, 0x1e, 0xd6, 0xe9, 0xcb,
	0xd6, 0xe7, 0x01, 0xfe, 0x2d, 0x80, 0xb7, 0xcc, 0xee, 0xdf, 0xf3, 0x94, 0x9d, 0x2f, 0x4a, 0xc9,
	0x9f, 0x40, 0xfb, 0x2c, 0x91, 0xd4, 0x90, 0x77, 0x07, 0xb7, 0x3d, 0xa2, 0x07, 0x89, 0x2c, 0x75,
	0x12, 0xe3, 0x86, 0xbe, 0x01, 0x60, 0x29, 0xcd, 0x14, 0x3b, 0x67, 0x54, 0xb8, 0xdd, 0x3f, 0xa8,
	0x47, 0xe9, 0xf2, 0x7c, 0x54, 0x3a, 0x92, 0x0a, 0x08, 0x7f, 0x01, 0xbb, 0xd5, 0x34, 0xbc, 0x9a,
	0x51, 0xa9, 0xd0, 0x3d, 0xd8, 0x16, 0xf4, 0xd5, 0x8c, 0x09, 0x9a, 0x6a, 0xf9, 0x36, 0x81, 0x9b,
	0xc4, 0x37, 0xe2, 0xbf, 0x83, 0x02, 0xcb, 0x27, 0xf3, 0x12, 0xeb, 0x6b, 0x0a, 0xde, 0x40, 0x13,
	0xfa, 0x0a, 0xba, 0x73, 0x3a, 0x56, 0x5c, 0x1c, 0x73, 0x25, 0x94, 0x8b, 0xeb, 0x5d, 0x2f, 0x19,
	0xc7, 0x5c, 0xa8, 0x0a, 0xba, 0xea, 0x8f, 0x8e, 0xe0, 0x96, 0xe4, 0x93, 0x99, 0xee, 0x90, 0xa7,
	0xa6, 0x4f, 0x64, 0xb4, 0x6e, 0x28, 0xee, 0xd4, 0x65, 0x8c, 0x7c, 0x37, 0x52, 0xc7, 0xe1, 0x3f,
	0x8b, 0x3a, 0x1d, 0x0b, 0x3e, 0xa6, 0x52, 0x5e, 0x63, 0x90, 0x8f, 0x20, 0xcc, 0x2d, 0x69, 0x21,
	0xd2, 0xc6, 0xf9, 0x7e, 0x9d, 0xe6, 0xd8, 0xf3, 0x22, 0x35, 0x14, 0x7e, 0xdd, 0x82, 0x5b, 0xb5,
	0x38, 0xd0, 0x63, 0x00, 0xa9, 0x6b, 0x22, 0x4e, 0x16, 0xb9, 0x6d, 0xa6, 0x70, 0xf0, 0xd1, 0x25,
	0xc1, 0xc7, 0xa3, 0x12, 0x21, 0x49, 0x05, 0x8e, 0x10, 0xb4, 0x59, 0xc6, 0x74, 0x19, 0xd6, 0xfb,
	0x01, 0x31, 0xff, 0xd1, 0x7b, 0xb0, 0x99, 0x0b, 0x3a, 0x66, 0x92, 0xf1, 0xcc, 0x24, 0x37, 0x20,
	0x4b, 0x83, 0x5e, 0x15, 0x74, 0x92, 0xfc, 0xfa, 0x90, 0xd3, 0xf3, 0xa8, 0x6d, 0x57, 0x4b, 0x83,
	0x5e, 0x65, 0x8a, 0x8a, 0x27, 0x6c, 0xca, 0x54, 0xd4, 0xd9, 0x0b, 0xfa, 0x1d, 0xb2, 0x34, 0xac,
	0x48, 0xcb, 0xc6, 0x1b, 0xa5, 0xe5, 0x36, 0x74, 0x2b, 0x01, 0x21, 0x80, 0x8d, 0xe1, 0xc1, 0x8f,
	0x27, 0x4f, 0x87, 0x3b, 0x6b, 0xf8, 0x8f, 0x00, 0x42, 0x1f, 0xed, 0x2b, 0x0e, 0x56, 0x28, 0x5e,
	0x46, 0xdb, 0xae, 0x47, 0xfb, 0x21, 0x84, 0xf2, 0x82, 0xe5, 0x47, 0x8a, 0x8a, 0x64, 0x59, 0xc8,
	0x0e, 0xa9, 0x59, 0x51, 0x04, 0x37, 0x74, 0x98, 0xc3, 0xd9, 0xd4, 0x64, 0xac, 0x43, 0x8a, 0x4f,
	0xfc, 0x7b, 0xcb, 0xcd, 0xaf, 0xd3, 0x3c, 0xad, 0x9c, 0xc2, 0x6b, 0x68, 0xb2, 0x53, 0xe8, 0xea,
	0x53, 0x63, 0x79, 0xa5, 0x29, 0x61, 0x77, 0x70, 0x7f, 0xe5, 0x1c, 0xf4, 0xf6, 0x36, 0x53, 0xcb,
	0xa1, 0xec, 0x30, 0xac, 0xf2, 0xf4, 0x9e, 0xc3, 0x4e, 0xdd, 0x61, 0xc5, 0x58, 0x8c, 0xfd, 0xb1,
	0x18, 0x79, 0x07, 0xd8, 0x6d, 0xb4, 0x9f, 0xa8, 0xa4, 0x3a, 0x18, 0xff, 0x2a, 0x52, 0xf1, 0x50,
	0xd0, 0x4a, 0x2a, 0x9e, 0xc3, 0x96, 0x06, 0xbb, 0xcf, 0x62, 0xa0, 0x7f, 0xba, 0x32, 0x10, 0x0f,
	0x69, 0x02, 0x29, 0x60, 0x36, 0x12, 0x8f, 0x09, 0x7d, 0x0b, 0x5b, 0x13, 0x96, 0x5d, 0x94, 0xcc,
	0x36, 0x45, 0xf7, 0x3c, 0xad, 0x4f, 0x96, 0x0e, 0xf1, 0x69, 0xc6, 0x94, 0xfb, 0x4f, 0x3c, 0x24,
	0xfa, 0x1a, 0x36, 0xe7, 0x89, 0x60, 0x89, 0xe2, 0x42, 0x0f, 0x1c, 0x4d, 0x83, 0xeb, 0x02, 0x7f,
	0x70, 0x0e, 0x95, 0x72, 0x2d, 0x41, 0xbd, 0x17, 0xb0, 0xdb, 0x90, 0x7b, 0x4d, 0x79, 0x3d, 0x01,
	0xd4, 0xdc, 0x1b, 0xf5, 0xe0, 0xa6, 0xc6, 0x0e, 0x93, 0x29, 0x75, 0x1b, 0x94, 0xdf, 0x08, 0xc3,
	0x96, 0x51, 0x76, 0x36, 0xb1, 0xeb, 0x2d, 0xb3, 0xee, 0xd9, 0xf0, 0x5d, 0xd8, 0x6d, 0xf4, 0x1f,
	0x0a, 0xa1, 0xc5, 0x52, 0x43, 0xd7, 0x21, 0x2d, 0x96, 0x0e, 0xfe, 0x69, 0x43, 0xe8, 0xbc, 0xdc,
	0x15, 0x8e, 0x5e, 0xc2, 0xb6, 0xad, 0x92, 0xb3, 0x23, 0x7c, 0x79, 0x25, 0x7b, 0x77, 0x57, 0xfa,
	0xf8, 0x17, 0x28, 0x5e, 0xd3, 0xdc, 0xb6, 0x2f, 0xff, 0x9f, 0xdb, 0x6b, 0xf7, 0xab, 0x72, 0xbf,
	0x80, 0xed, 0x7d, 0x3a, 0xa1, 0x4b, 0xee, 0xcb, 0x8f, 0xe3, 0x55, 0xa9, 0x4f, 0xe1, 0x86, 0x9b,
	0x49, 0x68, 0x35, 0xc2, 0xbf, 0x81, 0xae, 0x4a, 0xfb, 0x0c, 0x3a, 0x66, 0x0c, 0x36, 0x95, 0x36,
	0x6e, 0xee, 0xab, 0x52, 0x8e, 0xe0, 0xe6, 0x21, 0x55, 0xe6, 0xbd, 0xf0, 0x5f, 0xac, 0x95, 0xb7,
	0x44, 0x0f, 0x5f, 0xfe, 0xea, 0xc2, 0x6b, 0xe8, 0x3b, 0x08, 0x0f, 0xa9, 0xaa, 0xbe, 0x05, 0x91,
	0xd7, 0xd6, 0x07, 0xd3, 0x5c, 0x2d, 0x9a, 0x5c, 0xcd, 0x37, 0x24, 0x5e, 0x7b, 0xd0, 0x7e, 0xd9,
	0xca, 0xcf, 0xce, 0x36, 0xcc, 0x43, 0xf3, 0xfe, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x74, 0x4a,
	0x51, 0x57, 0xa5, 0x0a, 0x00, 0x00,
}
